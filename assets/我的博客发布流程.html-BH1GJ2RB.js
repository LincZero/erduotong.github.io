import{_ as a,c as n,d as o,b as r,a as e,o as s,r as l}from"./app-CfZ_ajB2.js";const p="/image/IMG-20241223%20234408081-%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B.png",c="/image/IMG-20241223%20234857934-%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B.png",d="/image/IMG-20241223%20234511943-%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B.png",g="/image/IMG-20241223%20235433905-%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B.png",h={};function u(E,t){const i=l("Mermaid");return s(),n("div",null,[t[0]||(t[0]=o('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在我使用了一段时间 Obsidian 后，随着内容产出的增多，我很需要一个地方满足自己的分享欲，并且也方便别人找到我，而不是甩一个b站主页上去。</p><p>作为一个折腾爱好者，能交给计算机干的绝对不会自己干。既然是都用 Obsidian 了，那双链等自然是必不可少的。同时，作为一个 All in one爱好者，ob仓库里面摆满了各种日记等隐私数据。自然，我不希望把它们分享出来。当然，博客自然要支持静态部署......</p><p>种种个性化需求，市面上没有博客框架能满足的了。因此，我一直在探索这方面的流程。经过大约两个月的折腾，整出了一套符合我需求的、方便的流程。现在在此把这一整套的流程分享出来。</p><h2 id="发布流程" tabindex="-1"><a class="header-anchor" href="#发布流程"><span>发布流程</span></a></h2><h3 id="上传与存储" tabindex="-1"><a class="header-anchor" href="#上传与存储"><span>上传与存储</span></a></h3><p>发布这种事情，自然是不能在本地处理了<s>不然就不够自动化了</s>。所以选择了<a href="https://github.com/features/actions" target="_blank" rel="noopener noreferrer">GitHub Actions</a>作为CI/CD，帮我干这件苦差事。</p><p>那么，首先，我们要把数据传到Github上。</p><p>不得不感慨Obsidian生态的强大，只要安装Obsidian Git，配置一下，让它定时上传到仓库就行了。 <s>顺便当个备份用</s></p><h3 id="预处理" tabindex="-1"><a class="header-anchor" href="#预处理"><span>预处理</span></a></h3><p>刚刚上传的数据没有经过任何处理，肯定不能随随便便发出来。所以先塞到一个私有仓库中，进行一些预处理。</p><p>这边，我选择了Python代码，用一些正则表达式，自动将 <code>[]()</code> 类型的链接转换成Vuepress支持的 <code>[]()</code> 格式的链接，并且构建了一个双链的数据结构。</p><figure><img src="'+p+'" alt="550" tabindex="0" loading="lazy"><figcaption>550</figcaption></figure><p>以及，Vuepress那边有个很难受的特性，公开资源一定要放在 <code>public</code> 文件夹中，不能直接方便的放在文件夹里面。<s>并且我也不想建图床</s> 所以，还得再来一个处理，把图片啥的移动过去</p><figure><img src="'+c+'" alt="600" tabindex="0" loading="lazy"><figcaption>600</figcaption></figure><p>顺手的事，还能处理一下<code>frontmatter</code>，把格式啥的转换一下。</p><figure><img src="'+d+'" alt="525" tabindex="0" loading="lazy"><figcaption>525</figcaption></figure><div class="callout" data-callout="info"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg></div><div class="callout-title-inner">代码链接</div></div><div class="callout-content"><p><a href="https://github.com/erduotong/erduotong.github.io/tree/main/scripts/vault_transform" target="_blank" rel="noopener noreferrer">erduotong.github.io/scripts/vault_transform at main · erduotong/erduotong.github.io</a></p></div></div><h3 id="审查" tabindex="-1"><a class="header-anchor" href="#审查"><span>审查</span></a></h3><p>谁能保证自己的代码绝对没Bug呢？这些隐私数据，还是过目一下比较好。</p><p>最终，我选择了在Github中的Pull Request进行审查(虽然好像本来它就是干这个的)，分为两个分支，一个分支存储刚处理好的内容，一个分支存储审核过的内容。而Pull Request则交给Github Action自己打开。</p><figure><img src="'+g+'" alt="IMG-20241223 235433905-我的博客发布流程.png" tabindex="0" loading="lazy"><figcaption>IMG-20241223 235433905-我的博客发布流程.png</figcaption></figure><p>具体而言，就是下面这个过程:</p>',23)),r(i,{id:"mermaid-71",code:"eJxLL0osyFAIceFSAALH6Kd9858u737a1vp03c5YBV1du5qXi1qeLml5PqGtRsEpGsJ6OqHv+awWqCKwRieQUgXn6KdrZzxtXfp0H1Bm4bMFO552tD2bsh6ixBmsxDXaPbMkozRJwTG5JDM/70X7qqddK552zH66e1dAEEShK1ihW/Xz/btfzmgNCHq/p+fJrl1Pty8FmTl/aS1YkRvEbQ2zXuxvr1Fwj346oePpzm1POzaA7O6f+HRHM7LdENVPdvTCNHhEP1vcADTsye7Fzxc0Pm5oBKp+vnH3i3X7nu9dB9HjAXaGExcAxsePKQ=="}),t[1]||(t[1]=e("h3",{id:"部署",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#部署"},[e("span",null,"部署")])],-1))])}const b=a(h,[["render",u],["__file","我的博客发布流程.html.vue"]]),A=JSON.parse('{"path":"/43%20%E9%A1%B9%E7%9B%AE/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B.html","title":"我的博客发布流程","lang":"zh-CN","frontmatter":{"category":["blog"],"date":"2024-12-21","isOriginal":true,"tags":["工作流","Vuepress","Obsidian"],"title":"我的博客发布流程","description":"前言 在我使用了一段时间 Obsidian 后，随着内容产出的增多，我很需要一个地方满足自己的分享欲，并且也方便别人找到我，而不是甩一个b站主页上去。 作为一个折腾爱好者，能交给计算机干的绝对不会自己干。既然是都用 Obsidian 了，那双链等自然是必不可少的。同时，作为一个 All in one爱好者，ob仓库里面摆满了各种日记等隐私数据。自然，我...","head":[["meta",{"property":"og:url","content":"https://erduotong.github.io/43%20%E9%A1%B9%E7%9B%AE/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"耳朵同的博客"}],["meta",{"property":"og:title","content":"我的博客发布流程"}],["meta",{"property":"og:description","content":"前言 在我使用了一段时间 Obsidian 后，随着内容产出的增多，我很需要一个地方满足自己的分享欲，并且也方便别人找到我，而不是甩一个b站主页上去。 作为一个折腾爱好者，能交给计算机干的绝对不会自己干。既然是都用 Obsidian 了，那双链等自然是必不可少的。同时，作为一个 All in one爱好者，ob仓库里面摆满了各种日记等隐私数据。自然，我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://erduotong.github.io/image/IMG-20241223 234408081-我的博客发布流程.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-28T14:55:16.000Z"}],["meta",{"property":"article:tag","content":"工作流"}],["meta",{"property":"article:tag","content":"Vuepress"}],["meta",{"property":"article:tag","content":"Obsidian"}],["meta",{"property":"article:published_time","content":"2024-12-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-28T14:55:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"我的博客发布流程\\",\\"image\\":[\\"https://erduotong.github.io/image/IMG-20241223 234408081-我的博客发布流程.png\\",\\"https://erduotong.github.io/image/IMG-20241223 234857934-我的博客发布流程.png\\",\\"https://erduotong.github.io/image/IMG-20241223 234511943-我的博客发布流程.png\\",\\"https://erduotong.github.io/image/IMG-20241223 235433905-我的博客发布流程.png\\"],\\"datePublished\\":\\"2024-12-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-28T14:55:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"耳朵同\\",\\"url\\":\\"https://erduotong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"发布流程","slug":"发布流程","link":"#发布流程","children":[{"level":3,"title":"上传与存储","slug":"上传与存储","link":"#上传与存储","children":[]},{"level":3,"title":"预处理","slug":"预处理","link":"#预处理","children":[]},{"level":3,"title":"审查","slug":"审查","link":"#审查","children":[]},{"level":3,"title":"部署","slug":"部署","link":"#部署","children":[]}]}],"git":{"createdTime":1735397716000,"updatedTime":1735397716000,"contributors":[{"name":"github-actions[bot]","username":"github-actions[bot]","email":"github-actions[bot]@users.noreply.github.com","commits":1,"url":"https://github.com/github-actions[bot]"}]},"readingTime":{"minutes":2.73,"words":819},"filePathRelative":"43 项目/博客折腾记录/我的博客发布流程.md","localizedDate":"2024年12月21日","excerpt":"<h2>前言</h2>\\n<p>在我使用了一段时间 Obsidian 后，随着内容产出的增多，我很需要一个地方满足自己的分享欲，并且也方便别人找到我，而不是甩一个b站主页上去。</p>\\n<p>作为一个折腾爱好者，能交给计算机干的绝对不会自己干。既然是都用 Obsidian 了，那双链等自然是必不可少的。同时，作为一个 All in one爱好者，ob仓库里面摆满了各种日记等隐私数据。自然，我不希望把它们分享出来。当然，博客自然要支持静态部署......</p>\\n<p>种种个性化需求，市面上没有博客框架能满足的了。因此，我一直在探索这方面的流程。经过大约两个月的折腾，整出了一套符合我需求的、方便的流程。现在在此把这一整套的流程分享出来。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"43 项目/博客折腾记录/我的博客发布流程.md","value":{"title":"我的博客发布流程","path":"43 项目/博客折腾记录/我的博客发布流程.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{b as comp,A as data};
